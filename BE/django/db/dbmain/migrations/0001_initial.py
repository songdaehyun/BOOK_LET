# Generated by Django 4.0 on 2023-04-02 17:22

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('author_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('author_name', models.CharField(max_length=32)),
            ],
            options={
                'db_table': 'author',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('book_isbn', models.CharField(max_length=16, primary_key=True, serialize=False)),
                ('book_title', models.CharField(max_length=256)),
                ('book_publisher', models.CharField(max_length=50)),
                ('book_price', models.IntegerField()),
                ('book_description', models.TextField()),
                ('book_grade', models.FloatField()),
                ('book_image', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'book',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BookCover',
            fields=[
                ('book_cover_id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'book_cover',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BookGenre',
            fields=[
                ('book_genre_id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'book_genre',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BookLikes',
            fields=[
                ('book_like_id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'book_likes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('comment_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('modified_date', models.DateTimeField(blank=True, null=True)),
                ('comment_content', models.CharField(max_length=255)),
                ('comment_depth', models.IntegerField()),
                ('comment_group', models.BigIntegerField()),
            ],
            options={
                'db_table': 'comment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('follow_id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'follow',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('genre_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('genre_name', models.CharField(max_length=32)),
            ],
            options={
                'db_table': 'genre',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Hashtag',
            fields=[
                ('hashtag_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('hashtag_name', models.TextField(db_collation='utf8mb4_0900_ai_ci')),
                ('hashtag_p_score', models.FloatField()),
                ('hashtag_n_score', models.FloatField()),
            ],
            options={
                'db_table': 'hashtag',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Paragraph',
            fields=[
                ('paragraph_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('modified_date', models.DateTimeField(blank=True, null=True)),
                ('paragraph_color', models.CharField(max_length=30)),
                ('paragraph_content', models.CharField(max_length=301)),
                ('paragraph_page', models.IntegerField()),
                ('scrap_count', models.IntegerField(blank=True, null=True)),
                ('paragraph_score', models.IntegerField()),
                ('paragraph_score_type', models.CharField(max_length=301)),
            ],
            options={
                'db_table': 'paragraph',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('review_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('review_content', models.CharField(blank=True, max_length=255, null=True)),
                ('review_grade', models.FloatField()),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('modified_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'review',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Scrap',
            fields=[
                ('scrap_id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'scrap',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('user_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('email', models.CharField(max_length=64, unique=True)),
                ('username', models.CharField(max_length=32, unique=True)),
                ('nickname', models.CharField(max_length=32, unique=True)),
                ('password', models.CharField(max_length=128)),
                ('user_type', models.IntegerField(blank=True, null=True)),
                ('user_role', models.IntegerField(blank=True, null=True)),
                ('age', models.IntegerField()),
                ('sex', models.IntegerField()),
                ('prefer_score', models.IntegerField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('role', models.CharField(blank=True, max_length=255, null=True)),
                ('type', models.IntegerField(blank=True, null=True)),
                ('prefer_type', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserHashtag',
            fields=[
                ('user_hashtag_id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'user_hashtag',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserImage',
            fields=[
                ('user_image_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('modified_date', models.DateTimeField(blank=True, null=True)),
                ('image_path', models.TextField()),
            ],
            options={
                'db_table': 'user_image',
                'managed': False,
            },
        ),
    ]
